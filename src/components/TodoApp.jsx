import React, { useState, useEffect } from "react";

const TodoApp = () => {
  // üõ† ÏÉÅÌÉú(state) Í¥ÄÎ¶¨
  const [todos, setTodos] = useState([]);
  const [task, setTask] = useState("");

  // ÏÑúÎ≤ÑÏóêÏÑú Ìï† Ïùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ (Spring Boot API Ïó∞Í≤∞)
  useEffect(() => {
    fetch("http://localhost:8080/api/todos") // Spring Boot API Ìò∏Ï∂ú
      .then((response) => response.json()) // JSON Î≥ÄÌôò
      .then((data) => setTodos(data)) // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      .catch((error) => console.error("Error fetching todos:", error));
  }, []); // []Î•º ÎÑ£ÏúºÎ©¥ ÏµúÏ¥à 1Î≤à Ïã§ÌñâÎê®

  // Ìï† Ïùº Ï∂îÍ∞Ä (Spring Boot APIÎ°ú Ï†ÑÏÜ°)
  const addTodo = () => {
    if (task.trim() === "") return;
  
    const newTodo = { title: task, completed: false };
  
    fetch("http://localhost:8080/api/todos", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newTodo),
    })
      .then((response) => response.json())
      .then((savedTodo) => {
        setTodos(prevTodos => [...prevTodos, savedTodo]);
        setTask("");
      })
      .catch((error) => console.error("Error adding todo:", error));
  };
  

  // ÏôÑÎ£å ÏÉÅÌÉú ÌÜ†Í∏Ä
  const toggleComplete = (id) => {
    const updatedTodos = todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    );
    setTodos(updatedTodos);
  };

  // Ìï† Ïùº ÏÇ≠Ï†ú (Spring Boot APIÎ°ú Ï†ÑÏÜ°)
  const deleteTodo = (id) => {
    fetch(`http://localhost:8080/api/todos/${id}`, { method: "DELETE" })
      .then(() => setTodos(todos.filter(todo => todo.id !== id)))
      .catch((error) => console.error("Error deleting todo:", error));
  };

  return (
    <div className="todo-container">
      <h1>To-Do List</h1>

      {/* Ìï† Ïùº ÏûÖÎ†•Ï∞Ω */}
      <div className="todo-input">
        <input
          type="text"
          value={task}
          onChange={(e) => setTask(e.target.value)}
          placeholder="Ìï† ÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
        />
        <button onClick={addTodo}>Ï∂îÍ∞Ä</button>
      </div>

      {/* Ìï† Ïùº Î™©Î°ù */}
      <ul className="todo-list">
        {todos.map((todo) => (
          <li key={todo.id} className={todo.completed ? "completed" : ""}>
            <span onClick={() => toggleComplete(todo.id)}>
              {todo.title}
            </span>
            <button onClick={() => deleteTodo(todo.id)}>ÏÇ≠Ï†ú</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TodoApp;
